# this is who-drives-next, based on an example of the Uber API
swagger: '2.0'
info:
  title: Who drives Next?
  description: |
  Your API for managing your carpool.

  ##Date format
  Dates are formatted as descibed in [RFC3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14).

  version: "0.1.0"
# the domain of the service
host: api.wdn.binares.de
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
tags:
  - name: User
    description: Managing users and identities
  - name: Carpool
    description: Managing rarpools, their members and rides
  - name: Alternative1
    description: Version 1 how to represent rides
  - name: Alternative2
    description: Version 2  how to represent rides

paths:
  /carpools:
    post:
      summary: create a carpool - a group of people who want to drive together
      description: |
        You can create a new carpool and add drivers or passengers.
        Rides can be associated to a carpool and statistics are offered.
      parameters:
        - name: carpool
          in: body
          description: carpool object
          required: true
          schema:
            $ref: "#/definitions/carpool"
      tags:
        - carpool
      responses:
        200:
          description: the created carpool
          schema:
            $ref: '#/definitions/carpool'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
    get:
      summary: carpool - a group of people who want to drive together
      description: |
        tbd.
      parameters:
        - name: name
          in: query
          description: Name of the Car pool
          required: true
          type: string
      tags:
        - carpool
      responses:
        200:
          description: the created carpool
          schema:
            $ref: '#/definitions/carpool'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
  /rides2:
    post:
      summary: create a ride - per carpool and day no or one ride
      description: |
        rides can only be added to existing carpools and can be added by any member of the carpool.

        ALTERNATIVE:
        zur Diskussion: statt /rides  k√∂nnte /rides2  konzept verwendet werden
      parameters:
        - name: ride2
          in: body
          required: true
          schema:
            $ref: '#/definitions/ride2'
      tags:
        - carpool
        - Alternative2
      responses:
        200:
          description: the created ride
          schema:
              $ref: '#/definitions/ride2'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
    get:
      summary: search for rides
      description: |
        show the history or search for rides.
        either an userid or a carpoolId is required.
        rides can only be found by the driver, the passengers or any member of the associated carpool.
      tags:
        - carpool
        - Alternative2
      parameters:
        - name: carpoolId
          description: unique ID of the carpool you want to search rides from
          in: query
          type: string
          required: false
        - name: userId
          in: query
          description: |
            search rides where the user was either driver or passenger.
          required: false
          type: string
        - name: from
          in: query
          description: |
            search rides since or at that from-date.

            date in ??? format
          required: false
          type: string
        - name: to
          in: query
          description: |
            search rides before or at that to-date.

            date in ??? format
          required: false
          type: string
        - name: lastDays
          in: query
          description: |
            search rides in the last number of days from now.

            may give unexpected results if you combine this with from/to query parameters.
          required: false
          type: number
        - name: offset
          in: query
          type: integer
          format: int32
          description: Offset the list of returned results by this amount. Default is zero.
        - name: limit
          in: query
          type: integer
          format: int32
          description: Number of items to retrieve. Default is 5, maximum is 100.
      responses:
        200:
          description: the rides
          schema:
              $ref: '#/definitions/ride2PageableList'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'

  /rides:
    post:
      summary: create a ride - a group of people driving together
      description: |
        rides can only be added to existing carpools and can be added by any member of the carpool.
      parameters:
        - name: ride
          in: body
          required: true
          schema:
            $ref: '#/definitions/ride'
      tags:
        - carpool
        - Alternative1
      responses:
        200:
          description: the created ride
          schema:
              $ref: '#/definitions/ride'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
    get:
      summary: search for rides
      description: |
        show the history or search for rides.
        either an userid or a carpoolId is required.
        rides can only be found by the driver, the passengers or any member of the associated carpool.
      parameters:
        - name: carpoolId
          description: unique ID of the carpool you want to search rides from
          in: query
          type: string
          required: false
        - name: userId
          in: query
          description: |
            search rides where the user was either driver or passenger.
          required: false
          type: string
        - name: from
          in: query
          description: |
            search rides since or at that from-date.

            date in ??? format
          required: false
          type: string
        - name: to
          in: query
          description: |
            search rides before or at that to-date.

            date in ??? format
          required: false
          type: string
        - name: lastDays
          in: query
          description: |
            search rides in the last number of days from now.

            may give unexpected results if you combine this with from/to query parameters.
          required: false
          type: number
        - name: offset
          in: query
          type: integer
          format: int32
          description: Offset the list of returned results by this amount. Default is zero.
        - name: limit
          in: query
          type: integer
          format: int32
          description: Number of items to retrieve. Default is 5, maximum is 100.
      tags:
        - carpool
        - Alternative1
      responses:
        200:
          description: the rides
          schema:
              $ref: '#/definitions/ridePageableList'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'


  /rides/{rideId}:
    delete:
      summary: deletes a ride
      description: |
        tbd
      parameters:
        - name: rideId
          description: unique ID of the ride you want to delete
          in: path
          type: string
          required: true
      tags:
        - carpool
        - Alternative1
      responses:
        200:
          description: the ride has been deleted. Empty response.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'

  /rides/{rideId}/driver:
    put:
      summary: set a driver to a ride
      description: |
        one driver can be set to a existing ride. If allready a driver has been set it will be replaced.
        A ride allways has to have an driver, though no delete is allowed, only replace via put.

        the driver must be one of the members of the carpool.
      parameters:
        - name: rideId
          description: unique ID of the ride you want to set the driver to
          in: path
          type: string
          required: true
        - name: driver
          in: body
          required: true
          schema:
            $ref: "#/definitions/member"
      tags:
        - carpool
        - Alternative1
      responses:
        200:
          description: the updated ride
          schema:
              $ref: '#/definitions/ride'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
  /rides/{rideId}/passengers:
    post:
      summary: add a passenger a ride
      description: |
        add a list of passengers to the ride. To add more passengers or to delete a passenger the complete list has to be added again. To delete all passengers a empty list can be posted.

        all passengers must be members of the carpool.
        the driver can not be a passenger.
      parameters:
        - name: rideId
          description: unique ID of the ride you want to set the passenger to
          in: path
          type: string
          required: true
        - name: passenger
          in: body
          required: true
          schema:
            $ref: "#/definitions/member"
      tags:
        - carpool
        - Alternative1
      responses:
        200:
          description: the updated ride
          schema:
              $ref: '#/definitions/ride'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
  /users:
      get:
        summary: User Profile
        description: |
          The User Profile endpoint returns information about a who-drives-next user.

          The details of the response are depending on the authorisation of the user
          * any registeres user can see the username, which can be used to identify an user before adding to a carpool.
          * only users of a carpool can see more details of users who are assigned to the carpool
        tags:
          - User
        responses:
          200:
            description: Profile information for a user
            schema:
              $ref: '#/definitions/profile'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/error'
  /users/{userId}/vacations:
    post:
      summary: add a Off-Time to an user
      description: |
        tbd
      tags:
        - User
        - Alternative1
      parameters:
        - name: userId
          description: unique ID of the user you want to add an Off-Time to
          in: path
          type: string
          required: true
        - name: vacation
          in: body
          required: true
          schema:
            $ref: "#/definitions/vacationCore"

      responses:
        200:
          description: vacation - the newly created Off-Time
          schema:
            $ref: '#/definitions/vacation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
    get:
      summary: Off-Times of a user.
      description: |
        For a user a list of Off-time periods can be defined.
        During off times users can not be added to rides.  This eases the creation of new rides.
      tags:
        - User
        - Alternative1
      parameters:
        - name: userId
          description: unique ID of the user for whicht you search Off-Times
          in: path
          type: string
          required: true
      responses:
        200:
          description: List of Off-Time periods.
          schema:
            $ref: '#/definitions/vacationList'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
  /me:
    get:
      summary: User Profile
      description: The User Profile endpoint returns information about the who-drives-next user that has authorized with the application.
      tags:
        - User
      responses:
        200:
          description: Profile information for a user
          schema:
            $ref: '#/definitions/profile'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
  /history:
    get:
      summary: User Activity
      description: The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.
      parameters:
        - name: offset
          in: query
          type: integer
          format: int32
          description: Offset the list of returned results by this amount. Default is zero.
        - name: limit
          in: query
          type: integer
          format: int32
          description: Number of items to retrieve. Default is 5, maximum is 100.
      tags:
        - User
      responses:
        200:
          description: History information for the given user
          schema:
            $ref: '#/definitions/Activities'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
definitions:
  carpool:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a carpool.
      name:
        type: string
        description: Name of the carpool.
      displayName:
        type: string
        description: Display name of carpool.
      capacity:
        type: string
        description: Capacity of carpool. For example, 4 people.
      image:
        type: string
        description: Image URL representing the carpool.

  ride2:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a r√≠de.
      carpoolId:
        type: string
        description: a ride must belong to a carpool
      date:
        type: string
        format: date-time
        description: Date of the ride.
      members:
        $ref: '#/definitions/membersOfRide'

  membersOfRide:
    type: array
    description: List of members and there state at this ride
    items:
      $ref: "#/definitions/memberOfRide"

  memberOfRide:
    type: object
    description: State of each member of a ride
    properties:
      memberId:
        type: string
        description: id of the member
      role:
        type: string
        description: |
          role of the member in this ride.

          possible values are:
            * driver: member was the driver of this ride
            * passenger: member joined and was passenger in the car of the driver
            * allone: member did not join this ride, but drove allone
            * not:  member did not join this ride

  ride2List:
    type: array
    description: List of rides
    items:
      $ref: "#/definitions/ride2"

  ride2PageableList:
    type: object
    description: Pageable List of rides
    properties:
      paging:
        $ref: "#/definitions/paging"
      rides:
        type: array
        description: List of rides
        items:
          $ref: "#/definitions/ride2"

  ride:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a r√≠de.
      carpoolId:
        type: string
        description: a ride must belong to a carpool
      date:
        type: string
        format: date-time
        description: Date of the ride.  If not only a date ist set, the time should represent the start time of the ride.
      driver:
        $ref: '#/definitions/driver'
      passengers:
        type: array
        items:
          $ref: '#/definitions/passenger'

  rideList:
    type: array
    description: List of rides
    items:
      $ref: "#/definitions/ride"

  ridePageableList:
    type: object
    description: Pageable List of rides
    properties:
      paging:
        $ref: "#/definitions/paging"
      rides:
        type: array
        description: List of rides
        items:
          $ref: "#/definitions/ride"

  passenger:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a r√≠de.
      date:
        type: string
        format: date
        description: Date of the ride.
  driver:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a r√≠de.
      date:
        type: string
        format: date
        description: Date of the ride.
  member:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a member.
      profileId:
        type: string
        description: Unique identifier of the profile of the member.
      nickname:
        type: string
        description: Nickname of Name-Summary of the member.
# the vacation without the id
  vacationCore:
    type: object
    properties:
      fromDate:
        type: string
        format: date
        description: First day of the Off-Time
      toDate:
        type: string
        format: date
        description: Last day of the Off-Time

  vacation:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a vacation.
      fromDate:
        type: string
        format: date
        description: First day of the Off-Time
      toDate:
        type: string
        format: date
        description: Last day of the Off-Time

  vacationList:
    type: array
    description: List of Off-Times
    items:
      $ref: "#/definitions/vacation"
  profile:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the user.
      last_name:
        type: string
        description: Last name of the user.
      email:
        type: string
        description: Email address of the user
      picture:
        type: string
        description: Image URL of the user.
      promo_code:
        type: string
        description: Promo code of the user.

  Activity:
    type: object
    properties:
      uuid:
        type: string
        description: Unique identifier for the activity

  Activities:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Activity'

  error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

  paging:
    type: object
    description: Paging-Objekt
    properties:
      total:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
